import { CdkTextareaAutosize } from '@angular/cdk/text-field';
import { Component, ElementRef, NgZone, OnInit, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { DragScrollComponent } from 'custom_module/ngx-drag-scroll/src/public-api';
import { response } from 'express';
import { take } from 'rxjs/operators';
import { BrowserNavigationService } from 'src/app/home/service/home.browser.navigation.service';
import { environment } from 'src/environments/environment';
import { HomeComponent } from '../../../components/home.component';
import { MessengerComponent } from '../../../messenger/messenger.component';
import { HomeService } from '../../../service/home.service';
import * as $ from 'jquery';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-conversations',
  templateUrl: './conversations.component.html',
  styleUrls: ['./conversations.component.css']
})
export class ConversationsComponent implements OnInit {

  @ViewChild('chat_div') chat_div_element!: ElementRef;
  // @ViewChild('chat_textarea') chat_textarea_element!: CdkTextareaAutosize;

  hideScrollbar:any;
  disabled:any;
  xDisabled:any;
  yDisabled:any;
  imagelist = [
    '1.png',
    '2.png',
    '3.png',
    '4.png',
    '5.png',
    '6.png',
    '7.png',
    '8.png',
    '9.png',
    '10.png',
    '11.png',
    '12.png',
    '13.png',
    '14.png',
    '15.png',
    '16.png',
    '17.png',
    '18.png',
    '19.png',
    '20.png',
    '21.png',
    '22.png',
    '23.png',
    '24.png',
    '25.png',
    '26.png',
    '27.png',
    '28.png',
    '29.png',
    '30.png'
  ];

  leftNavDisabled = false;
  rightNavDisabled = false;
  index = 0;

  baseUrl = environment.apiHost

  @ViewChild('autosize') autosize!: CdkTextareaAutosize;

  @ViewChild('formChat') formChat!: FormControl;

  triggerResize() {
    // Wait for changes to be applied, then trigger textarea resize.
    this._ngZone.onStable.pipe(take(1)).subscribe(() => this.autosize.resizeToFitContent(true));
  }

  @ViewChild('nav', { read: DragScrollComponent, static: true })
  ds!: DragScrollComponent;

  // @ViewChild('chat_textarea') 
  // contentFCAutosize!: CdkTextareaAutosize;

  contentFC = new FormControl();

  clickItem(item:any) {
    console.log('item clicked: ', item);
  }

  remove() {
    this.imagelist.pop();
  }

  toggleHideSB() {
    this.hideScrollbar = !this.hideScrollbar;
  }

  toggleDisable() {
    this.disabled = !this.disabled;
  }
  toggleXDisable() {
    this.xDisabled = !this.xDisabled;
  }
  toggleYDisable() {
    this.yDisabled = !this.yDisabled;
  }

  moveLeft() {
    this.ds.moveLeft();
  }

  moveRight() {
    this.ds.moveRight();
  }

  moveTo(idx: number) {
    this.ds.moveTo(idx);
  }

  leftBoundStat(reachesLeftBound: boolean) {
    this.leftNavDisabled = reachesLeftBound;
  }

  rightBoundStat(reachesRightBound: boolean) {
    this.rightNavDisabled = reachesRightBound;
  }

  onIndexChanged(idx:any) {
    this.index = idx;
  }

  constructor(private elementRef: ElementRef, private _ngZone: NgZone, private homeService: HomeService, private sanitizer: DomSanitizer, private homeComponent: HomeComponent, private router: Router, private browserNavigationService: BrowserNavigationService) {
    browserNavigationService.load(router)
  }

  $_FRIENS_LIST = new Array()

  $_FRIENDS_PHOTO: any

  thumbnail: any

  _conversations = false

  $_U_NAME = ''

  $_U_SURNAME = ''

  $_MESSAGE = ''

  $_MESSAGE_LIST = new Array()

  onEnter() {
    console.log("My text: " + this.$_MESSAGE);
    console.log(sessionStorage.getItem("USER_ID"));
    
    this.homeService.sendMessageToUser(Number(sessionStorage.getItem("USER_ID")), this.$_FRIEND_ID, this.$_MESSAGE)
      .subscribe((response: any) => {

        // console.log(JSON.stringify(response));
        // this.getChat(Number(sessionStorage.getItem('USER_ID')), this.$_FRIEND_ID)
        setInterval(() => {
          this.getChat(Number(sessionStorage.getItem('USER_ID')), this.$_FRIEND_ID)
        }, 250);

        this.$_MESSAGE = ''

      }, (err) => {
        console.log(JSON.stringify(err));
      })
  }

  onKeydown(event:any){
    event.preventDefault();
  }

  $_FRIEND_ID = -1

  showMessenger(FRIEND_ID: number) {
    // console.log("FRIEN: " + FRIEND_ID);
    this.$_FRIEND_ID = FRIEND_ID
    // this.messenger.$_FRIEND_ID = FRIEND_ID
    // this.messenger.getFriendInfo()
    // MessengerComponent.$_FRIEND_ID = FRIEND_ID
    // this.homeComponent.$_show_messenger = true

    this.homeService.getUserInfo(FRIEND_ID)
        .subscribe(
          (response: any) => {
            // console.log("USER CONV: " + JSON.stringify(response));
            
            // this.dataSharingService.isUserLoggedIn.next(true);
            // console.log(response['Name']);
            
            this.$_U_NAME = response['Name']
            this.$_U_SURNAME = response['Surname']
            setInterval(() => {
              this.getChat(Number(sessionStorage.getItem('USER_ID')), FRIEND_ID)
            }, 250);
            

          }, (err) => {
            console.log(JSON.stringify(err));
          }
        )


  }

  getChat($_USER_ID: number, $_FRIEND_ID: number) {
    this.homeService.getAllMessages($_USER_ID, $_FRIEND_ID)
      .subscribe((response: any) => {
          // console.log(JSON.stringify(response));
          this.$_MESSAGE_LIST = response;
          // this.$_MESSAGE = ''
          this._conversations = true
      }, (err) => {
        console.log(JSON.stringify(err));
        
      })
  }

  $_TEXTAREA_HEIGHT = 0

  $_INIT_CHAT_DIV_HEIGHT = 0

  $_INIT_MESS_DIV_HEIGHT = 0

  $_INIT_TEXTAREA_HEIGHT = 0

  ngOnInit(): void {

    this.getPeopleConversationData()

    let cd = document.getElementById('c_div')
    if (cd) this.$_INIT_CHAT_DIV_HEIGHT = parseInt(cd.style.height.replace("px", ""))

    let md = document.getElementById('m_div')
    if (md) this.$_INIT_MESS_DIV_HEIGHT = parseInt(md.style.height.replace("px", ""))

    
    // $(document).ready(() => {
    // });
  }

  ngAfterViewInit() {
    // this.elementRef.nativeElement.querySelector('c_textarea')
    //                             .addEventListener('change', this.keyPress.bind(this));
    let _textarea = document.getElementById('c_textarea')
    if (_textarea) {
      console.log("INITIAL TEXT AREA HEIGHT1: " + _textarea.style.height);
      
      this.$_INIT_TEXTAREA_HEIGHT = parseInt(_textarea.style.height.replace("px", ""))
    }
  }

  getPeopleConversationData() {

    this.homeService.getListOfConversations(Number(sessionStorage.getItem('USER_ID')))
      .subscribe((response: any) => {
        
        // console.log(JSON.stringify(response));
        this.$_FRIENS_LIST = response;

        let objectURL = 'data:image/jpeg;base64,' + response[0]['Avatar_Path'].image;
        this.thumbnail = this.sanitizer.bypassSecurityTrustUrl(objectURL);

        // console.log(this.thumbnail);
        
      }, (err) => {
        console.log(JSON.stringify(err));
      })
  }

  userText(event: any) {
    console.log(event.target.value)
  }

  keyPress(text: any) {

    // console.log(text.split('\n').length)

    let div_a = document.getElementById('c_div')

    let div_m = document.getElementById('m_div')

    let textarea_m = document.getElementById('c_textarea')

    // if (text.split('\n').length <= 5)
    //   if (text.split('\n').length < this.$_LAST_TEXTAREA_TEXT_ROW_COUNT) {

    //     if (div_a && textarea_m && div_m) {

    //       div_a.style.height = (parseInt(div_a.style.height.replace('px','')) - ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
    //       div_m.style.height = (parseInt(div_m.style.height.replace('px','')) + ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
    //     }

    //     this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = text.split('\n').length

    //   } else if (this.$_LAST_TEXTAREA_TEXT_ROW_COUNT < text.split('\n').length) {

    //     if (div_a && textarea_m && div_m) {

    //         div_a.style.height = (this.$_INIT_CHAT_DIV_HEIGHT + parseInt(textarea_m.style.height.replace('px',''))) + "px"
    //         div_m.style.height = (parseInt(div_m.style.height.replace('px','')) - 18) + "px"
    //     }

    //     this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = text.split('\n').length
    //   }
  }
















  $_TEXTAREA_TEXT: string = ''
  $_LAST_TEXTAREA_TEXT_ROW_COUNT = 1

  test(event: any) {

    
    
    

    // var key = event.keyCode || event.charCode;

    // if( key == 8 || key == 46 )
    //     alert(123)

      let div_a = document.getElementById('c_div')

      let div_m = document.getElementById('m_div')

      let textarea_m = document.getElementById('c_textarea')

      if (textarea_m) this.$_TEXTAREA_HEIGHT = parseInt(textarea_m.style.height.replace("px", ""))

      let text = "";

      if (event.key.length < 2) {
      //  console.log(event.target.value + event.key);
        text = event.target.value + event.key;
      }

      // let text2 = this.$_TEXTAREA_TEXT

      // console.log(text.includes('\n'))
      let r = text.split('\n')
      console.log(r)
      let newLineCount = text.split('\n').length
      // let newLineCount2 = this.$_TEXTAREA_TEXT.split('\n').length

    // console.log(event)
    
    // console.log("NUMBER OF LINES2 " + newLineCount2) 
    // console.log(newLineCount  + " " +  this.$_LAST_TEXTAREA_TEXT_ROW_COUNT)
    if (event.keyCode == 13 && event.shiftKey) {

      // ++newLineCount;

      console.log("NUMBER OF LINES1 " + newLineCount)

      console.log("COMBINATION event.keyCode == 13 && event.shiftKey")

      if (newLineCount <= 5) {

        if (div_a && textarea_m && div_m) {

          console.log("newLineCount = " + newLineCount)
          console.log("this.$_INIT_TEXTAREA_HEIGHT = " + this.$_INIT_TEXTAREA_HEIGHT);
          console.log("this.$_INIT_CHAT_DIV_HEIGHT = " + this.$_INIT_CHAT_DIV_HEIGHT);

          div_a.style.height = ((newLineCount * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
          console.log("div_a.style.height " + div_a.style.height)

          console.log("this.$_INIT_MESS_DIV_HEIGHT = " + this.$_INIT_MESS_DIV_HEIGHT);
          
          div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (newLineCount * this.$_INIT_TEXTAREA_HEIGHT)) + "px"
          console.log("div_m.style.height " + div_m.style.height);
          
        }

        if (newLineCount < this.$_LAST_TEXTAREA_TEXT_ROW_COUNT) {
          // console.log(text)
          // console.log("When newLineCount(" + newLineCount + ") < this.$_LAST_TEXTAREA_TEXT_ROW_COUNT(" + this.$_LAST_TEXTAREA_TEXT_ROW_COUNT + ")")
          
          if (div_a && textarea_m && div_m) {

            // console.log("FOR div_a = " + div_a.style.height + " - " + this.$_LAST_TEXTAREA_TEXT_ROW_COUNT + " - " + text.length + " * 18")

            // numarul la linii inmultsask cu inaltimea initiala la textarea dupa care adun cu inaltimea la div_a


            // div_a.style.height = (parseInt(div_a.style.height.replace('px','')) - ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
            // console.log(div_a.style.height)

            // console.log("FOR div_m = " + div_m.style.height + " + " + this.$_LAST_TEXTAREA_TEXT_ROW_COUNT + " - " + text.length + " * 18")
            
            // numarul la linii inmultsask cu inaltimea initiala la textarea dupa care scad cu inaltimea la div_m

            // div_m.style.height = (parseInt(div_m.style.height.replace('px','')) + ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
            // console.log(div_m.style.height)
          }

          this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = newLineCount

        } else if (newLineCount > this.$_LAST_TEXTAREA_TEXT_ROW_COUNT) {
          // console.log(text)
          // console.log("When newLineCount(" + newLineCount + ") > this.$_LAST_TEXTAREA_TEXT_ROW_COUNT(" + this.$_LAST_TEXTAREA_TEXT_ROW_COUNT + ")")

          if (div_a && textarea_m && div_m) {

              // console.log("FOR div_a = " + this.$_INIT_CHAT_DIV_HEIGHT + " + " + textarea_m.style.height)

              // div_a.style.height = (this.$_INIT_CHAT_DIV_HEIGHT + parseInt(textarea_m.style.height.replace('px',''))) + "px"

              // console.log("div_a: " + div_a.style.height)

              // console.log("FOR div_m = " + div_m.style.height + " - " + 18)
              // div_m.style.height = (parseInt(div_m.style.height.replace('px','')) - 18) + "px"
              // console.log("div_m: " + div_m.style.height)
          }

          this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = newLineCount
        }
      }
    } else if (event.keyCode == 8) {

      // if (r[r.length - 1] == '' && r.length > 1)
      //   newLineCount -= 2;
      // else --newLineCount;

      let nlc = 0;
      if (r[r.length - 1] == '' && r.length > 1) {
        nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 2
      } else {
        nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 1
      }

      console.log("NUMBER OF LINES2 " + nlc)

      console.log("event.keyCode == 8")

      if(div_a && div_m) {
          div_a.style.height = ((nlc * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
          console.log("div_a.style.height " + div_a.style.height)

          console.log("this.$_INIT_MESS_DIV_HEIGHT = " + this.$_INIT_MESS_DIV_HEIGHT);
          
          div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (nlc * this.$_INIT_TEXTAREA_HEIGHT)) + "px"
      }
      
      // console.log(newLineCount  + " " +  this.$_LAST_TEXTAREA_TEXT_ROW_COUNT)
    } else if (event.keyCode == 13) {

      console.log("NUMBER OF LINES3 " + newLineCount)
      console.log("event.keyCode == 13")

      if (div_a && div_m) {
        div_a.style.height = this.$_INIT_CHAT_DIV_HEIGHT + "px"
        div_m.style.height = this.$_INIT_MESS_DIV_HEIGHT + "px"
      }
        
      this.$_TEXTAREA_TEXT = ''
      event.preventDefault();
    }
    
   
    // let text = event.target.value
   
    // console.log(event.keyCode + ' ' + event.shiftKey);

    // if (event.keyCode == 13) {

    //   console.log(this.$_TEXTAREA_TEXT)

    //   this.$_TEXTAREA_TEXT = null
    // } else {

    //   let div_a = document.getElementById('c_div')

    //   let div_m = document.getElementById('m_div')

    //   let textarea_m = document.getElementById('c_textarea')

    //   console.log("I AM HERE " + text.split('\n').length);

    //   let new_line = text.split('\n').length + 1

    //   console.log("new_line " + new_line);

    //   if (new_line <= 5 && text.includes('\n'))
    //     if (new_line < this.$_LAST_TEXTAREA_TEXT_ROW_COUNT) {
    //       console.log("I AM HERE");
          
    //       if (div_a && textarea_m && div_m) {

    //         div_a.style.height = (parseInt(div_a.style.height.replace('px','')) - ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
    //         div_m.style.height = (parseInt(div_m.style.height.replace('px','')) + ((this.$_LAST_TEXTAREA_TEXT_ROW_COUNT - text.split('\n').length) * 18)) + "px"
    //       }

    //       this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = new_line

    //     } else if (this.$_LAST_TEXTAREA_TEXT_ROW_COUNT < new_line) {

    //       if (div_a && textarea_m && div_m) {

    //           div_a.style.height = (this.$_INIT_CHAT_DIV_HEIGHT + parseInt(textarea_m.style.height.replace('px',''))) + "px"
    //           div_m.style.height = (parseInt(div_m.style.height.replace('px','')) - 18) + "px"
    //       }

    //       this.$_LAST_TEXTAREA_TEXT_ROW_COUNT = new_line
    //     }
    // }
  }
}
