import { CdkTextareaAutosize } from '@angular/cdk/text-field';
import { Component, ElementRef, NgZone, OnInit, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { DragScrollComponent } from 'custom_module/ngx-drag-scroll/src/public-api';
import { debounceTime, map, take } from 'rxjs/operators';
import { BrowserNavigationService } from 'src/app/home/service/home.browser.navigation.service';
import { environment } from 'src/environments/environment';
import { HomeComponent } from '../../../components/home.component';
import { HomeService } from '../../../service/home.service';
import * as $ from 'jquery';
import { FormControl } from '@angular/forms';
import { ConversationsService } from './service/conversations.service';
import { Observable, Subject } from 'rxjs';

@Component({
  selector: 'app-conversations',
  templateUrl: './conversations.component.html',
  styleUrls: ['./conversations.component.css']
})
export class ConversationsComponent implements OnInit {

  @ViewChild('chat_div') chat_div_element!: ElementRef;

  @ViewChild('autosize') autosize!: CdkTextareaAutosize;

  @ViewChild('formChat') formChat!: FormControl;

  @ViewChild('nav', { read: DragScrollComponent, static: true }) ds!: DragScrollComponent;

  hideScrollbar:any;

  disabled:any;

  xDisabled:any;

  yDisabled:any;

  imagelist = [
    '1.png',
    '2.png',
    '3.png',
    '4.png',
    '5.png',
    '6.png',
    '7.png',
    '8.png',
    '9.png',
    '10.png',
    '11.png',
    '12.png',
    '13.png',
    '14.png',
    '15.png',
    '16.png',
    '17.png',
    '18.png',
    '19.png',
    '20.png',
    '21.png',
    '22.png',
    '23.png',
    '24.png',
    '25.png',
    '26.png',
    '27.png',
    '28.png',
    '29.png',
    '30.png'
  ];

  leftNavDisabled = false;

  rightNavDisabled = false;

  index = 0;

  $_FRIENS_LIST = new Array()

  $_FRIENDS_PHOTO: any

  thumbnail: any

  _conversations = false

  $_U_NAME = ''

  $_U_SURNAME = ''

  $_MESSAGE = ''

  $_MESSAGE_LIST = new Array()

  $_FRIEND_ID = -1

  baseUrl = environment.apiHost

  constructor(private elementRef: ElementRef, 
    private _ngZone: NgZone, 
    private homeService: HomeService, 
    private sanitizer: DomSanitizer, 
    private homeComponent: HomeComponent, 
    private router: Router, 
    private browserNavigationService: BrowserNavigationService, 
    private conversationService: ConversationsService) {
      
    browserNavigationService.load(router)

    this.$_MESSAGE_LIST[0] = 'we'
  }

  triggerResize() {
    // Wait for changes to be applied, then trigger textarea resize.
    this._ngZone.onStable.pipe(take(1)).subscribe(() => this.autosize.resizeToFitContent(true));
  }

  clickItem(item:any) {
    console.log('item clicked: ', item);
  }

  remove() {
    this.imagelist.pop();
  }

  toggleHideSB() {
    this.hideScrollbar = !this.hideScrollbar;
  }

  toggleDisable() {
    this.disabled = !this.disabled;
  }

  toggleXDisable() {
    this.xDisabled = !this.xDisabled;
  }

  toggleYDisable() {
    this.yDisabled = !this.yDisabled;
  }

  moveLeft() {
    this.ds.moveLeft();
  }

  moveRight() {
    this.ds.moveRight();
  }

  moveTo(idx: number) {
    this.ds.moveTo(idx);
  }

  leftBoundStat(reachesLeftBound: boolean) {
    this.leftNavDisabled = reachesLeftBound;
  }

  rightBoundStat(reachesRightBound: boolean) {
    this.rightNavDisabled = reachesRightBound;
  }

  onIndexChanged(idx:any) {
    this.index = idx;
  }

  onEnter() {
    // console.log("My text: " + this.$_MESSAGE);
    // console.log(sessionStorage.getItem("USER_ID"));
    
    // this.homeService.sendMessageToUser(Number(sessionStorage.getItem("USER_ID")), this.$_FRIEND_ID, this.$_MESSAGE)
    //   .subscribe((response: any) => {

    //     // console.log(JSON.stringify(response));
    //     // this.getChat(Number(sessionStorage.getItem('USER_ID')), this.$_FRIEND_ID)
    //     setInterval(() => {
    //       this.getChat(Number(sessionStorage.getItem('USER_ID')), this.$_FRIEND_ID)
    //     }, 250);

    //     this.$_MESSAGE = ''

    //   }, (err) => {
    //     console.log(JSON.stringify(err));
    //   })
  }

  onKeydown(event:any){
    event.preventDefault();
  }

  showMessenger(FRIEND_ID: number) {
    // console.log("FRIEN: " + FRIEND_ID);
    this.$_FRIEND_ID = FRIEND_ID
    // this.messenger.$_FRIEND_ID = FRIEND_ID
    // this.messenger.getFriendInfo()
    // MessengerComponent.$_FRIEND_ID = FRIEND_ID
    // this.homeComponent.$_show_messenger = true

    this.homeService.getUserInfo(FRIEND_ID)
        .subscribe(
          (response: any) => {
            // console.log("USER CONV: " + JSON.stringify(response));
            
            // this.dataSharingService.isUserLoggedIn.next(true);
            // console.log(response['Name']);
            
            this.$_U_NAME = response['Name']
            this.$_U_SURNAME = response['Surname']
            setInterval(() => {
              this.getChat(Number(sessionStorage.getItem('USER_ID')), FRIEND_ID)
            }, 250);
            

          }, (err) => {
            console.log(JSON.stringify(err));
          }
        )


  }

  getChat($_USER_ID: number, $_FRIEND_ID: number) {
    this.homeService.getAllMessages($_USER_ID, $_FRIEND_ID)
      .subscribe((response: any) => {
          // console.log(JSON.stringify(response));
          this.$_MESSAGE_LIST = response;
          // this.$_MESSAGE = ''
          this._conversations = true
      }, (err) => {
        console.log(JSON.stringify(err));
        
      })
  }

  $_TEXTAREA_HEIGHT = 0

  $_INIT_CHAT_DIV_HEIGHT = 0

  $_INIT_MESS_DIV_HEIGHT = 0

  $_INIT_TEXTAREA_HEIGHT = 0

  result$!: Observable<any>
  subject = new Subject();

  onKeydownSearchConversation(event: any) {
    console.log(event.target.value);
    this.subject.next(event.target.value)
  }

  ngOnInit(): void {

    this.getPeopleConversationData()

    let cd = document.getElementById('c_div')
    if (cd) this.$_INIT_CHAT_DIV_HEIGHT = parseInt(cd.style.height.replace("px", ""))

    let md = document.getElementById('m_div')
    if (md) this.$_INIT_MESS_DIV_HEIGHT = parseInt(md.style.height.replace("px", ""))

    let scrollDiv = document.getElementById("scrollDiv");
    if (scrollDiv)
      scrollDiv.scrollTop = scrollDiv.scrollHeight;

    this.result$ = this.subject.pipe(
      debounceTime(500),
      map(searchConversation => {

        console.log(searchConversation);
        if (String(searchConversation)[0] != ' ') {
          this.getDataBySearchingConversation(String(searchConversation))
        }
      })
    )
      
    // $(document).ready(() => {
    // });
  }

  getDataBySearchingConversation($_SEARCH_TEXT: string) {

    console.log("SEARCH");
    
    
    let searchResults = $_SEARCH_TEXT.split(' ')

    let i = 0
    searchResults.forEach(
      e => {
       if (e == ' ' || e == '') searchResults.splice(i, 1)
       i++;
      }
    )

    if (searchResults.length > 0)
      this.conversationService.searchConversation(searchResults)
        .subscribe((results) => {
          console.log("SEARCH CONVERSATION RESULTS: " + results);
        })
  }

  ngAfterViewInit() {

    
    // this.elementRef.nativeElement.querySelector('textarea')
    //                             .addEventListener('keyup', this.trick0.bind(this));
    let _textarea = document.getElementById('c_textarea')
    if (_textarea) {
      console.log("INITIAL TEXT AREA HEIGHT1: " + _textarea.style.height);
      
      this.$_INIT_TEXTAREA_HEIGHT = parseInt(_textarea.style.height.replace("px", ""))
    }

    const div = document.querySelector('.root');
    const paragraph = document.getElementById('block-1');
    if (div && paragraph)
    div.addEventListener(
      'input',
      (event) => {
        if (event.target) {
          let el = <HTMLInputElement>event.target;
          if (!el.contains(paragraph)) {
            div.insertBefore(paragraph, div.firstChild);
          }
        }
      },
      false
    );
  }

  sendMessage(event: any) {
    // console.log(event);
    if (event.keyCode == 13 && event.shiftKey) {

    } else if (event.keyCode == 13 || event.type == 'click') {
      let el = document.getElementById('block-1')
      if (el) el.innerHTML = '<br>'
      event.preventDefault();
    }
  }

  getPeopleConversationData() {

    this.homeService.getListOfConversations(Number(sessionStorage.getItem('USER_ID')))
      .subscribe((response: any) => {
        
        // console.log(JSON.stringify(response));
        this.$_FRIENS_LIST = response;

        let objectURL = 'data:image/jpeg;base64,' + response[0]['Avatar_Path'].image;
        this.thumbnail = this.sanitizer.bypassSecurityTrustUrl(objectURL);

        // console.log(this.thumbnail);
        
      }, (err) => {
        console.log(JSON.stringify(err));
      })
  }

  userText(event: any) {
    console.log(event.target.value)
  }


  $_TEXTAREA_TEXT: string = ''
  $_LAST_TEXTAREA_TEXT_ROW_COUNT = 1

  text = "";

  shiftEnterBool = false

  lastLineCount = 0

  trick0(event: any) {
    console.log("TEXT: " + event.target.value)

    let textarea_m = document.getElementById('c_textarea')
    if (textarea_m) {
      this.$_TEXTAREA_HEIGHT = parseInt(textarea_m.style.height.replace("px", ""))
    }
  }

  trick1(event: any){

    let div_a = document.getElementById('c_div')

    let div_m = document.getElementById('m_div')

    let textarea_m = document.getElementById('c_textarea')
    if (textarea_m) {
      this.$_TEXTAREA_HEIGHT = parseInt(textarea_m.style.height.replace("px", ""))
    }

    let text = event.target.value

    let h = document.getElementById('c_textarea')
    if (h) {
      console.log(h.innerHTML.includes('\n'))
    }

    let r = text.split('\n')
    console.log(text.split('\n').length)

    let newLineCount = text.split('\n').length

    let nlc = 0;

    let t = this.getSelectedText()

    let p = String(t)
    
    let y = p.split('\n').length

    if (event.keyCode == 13 && event.shiftKey) {

      if (y > 1) {
        nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - y + 1
        newLineCount = newLineCount - y + 1
      }

      if (div_a && textarea_m && div_m && newLineCount < 5){

        if (y == 1)
          nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT)

        div_a.style.height = ((nlc * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
        div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (nlc * this.$_INIT_TEXTAREA_HEIGHT)) + "px"

      }
    }  else if (event.keyCode == 8) {

      if (y > 1) {
        nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - y
        newLineCount = newLineCount - y + 1
      }

      if (div_a && textarea_m && div_m && newLineCount <= 5) {

        if (y == 1) {
          if (r[r.length-1] == '' && this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT > 1) {
            nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 2
          } else {
            nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 1
          }
        }

        div_a.style.height = ((nlc * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
        div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (nlc * this.$_INIT_TEXTAREA_HEIGHT)) + "px"
      }

    } else if (event.keyCode == 13) {

      if (div_a && div_m) {
        div_a.style.height = this.$_INIT_CHAT_DIV_HEIGHT + "px"
        div_m.style.height = this.$_INIT_MESS_DIV_HEIGHT + "px"
      }
        
      this.$_TEXTAREA_TEXT = ''
      event.preventDefault();
    } else if (this.$_TEXTAREA_HEIGHT > this.$_INIT_TEXTAREA_HEIGHT) {

      if (div_a && div_m) {
        div_a.style.height = (this.$_INIT_TEXTAREA_HEIGHT + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
        div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - this.$_INIT_TEXTAREA_HEIGHT) + "px"
      }
    }
  }

  getSelectedText() {
    
    let selectedText = null;

    if (window.getSelection) {
        selectedText = window.getSelection();
    }
    else if (document.getSelection) {
        selectedText = document.getSelection();
    }
    return selectedText
}

























  trick2(event: any) {

    // console.log("MESS: " + event.target.value);

    let div_a = document.getElementById('c_div')

    let div_m = document.getElementById('m_div')

    let textarea_m = document.getElementById('c_textarea')
    if (textarea_m) this.$_TEXTAREA_HEIGHT = parseInt(textarea_m.style.height.replace("px", ""))

    if (this.shiftEnterBool) {
      
      let text = event.target.value

      let r = this.text.split('\n')

      let newLineCount = this.text.split('\n').length
      
      if (div_a && textarea_m && div_m && newLineCount <= 5){

        
      }

      this.shiftEnterBool = false

    } else {
      // console.log("TEXTAREA HEIGHT = " + this.$_TEXTAREA_HEIGHT);
    }
  }

  test(event: any) {

      let div_a = document.getElementById('c_div')

      let div_m = document.getElementById('m_div')

      let textarea_m = document.getElementById('c_textarea')

      if (textarea_m) this.$_TEXTAREA_HEIGHT = parseInt(textarea_m.style.height.replace("px", ""))

      console.log(event.target.value);
      

      if (event.key.length < 2) {
        this.text = event.target.value + event.key;
      } else if (event.keyCode == 8) {
        this.text = event.target.value
        console.log(this.$_TEXTAREA_TEXT);
        
      }

      let r = this.text.split('\n')
      // console.log(r)
      let newLineCount = this.text.split('\n').length
      // console.log(newLineCount);
      
    if (event.keyCode == 13 && event.shiftKey) {
      console.log("SHIFT ENTER");
      
      // if (newLineCount <= 5) {

      //   if (div_a && textarea_m && div_m) {

      //     div_a.style.height = ((newLineCount * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
      //     div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (newLineCount * this.$_INIT_TEXTAREA_HEIGHT)) + "px"
      //   }
      // }
    } else if (event.keyCode == 8) {

      // // if (r[r.length - 1] == '' && r.length > 1)
      // //   newLineCount -= 2;
      // // else --newLineCount;

      // let nlc = 0;
      // if (r[r.length - 1] == '' && r.length > 1) {
      //   nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 2
      // } else {
      //   nlc = (this.$_TEXTAREA_HEIGHT / this.$_INIT_TEXTAREA_HEIGHT) - 1
      // }

      // if(div_a && div_m) {
      //     div_a.style.height = ((nlc * this.$_INIT_TEXTAREA_HEIGHT) + this.$_INIT_CHAT_DIV_HEIGHT) + "px"
      //     div_m.style.height = (this.$_INIT_MESS_DIV_HEIGHT - (nlc * this.$_INIT_TEXTAREA_HEIGHT)) + "px"
      // }
      
    } else if (event.keyCode == 13) {

      console.log("NUMBER OF LINES3 " + newLineCount)
      console.log("event.keyCode == 13")

      if (div_a && div_m) {
        div_a.style.height = this.$_INIT_CHAT_DIV_HEIGHT + "px"
        div_m.style.height = this.$_INIT_MESS_DIV_HEIGHT + "px"
      }
        
      this.$_TEXTAREA_TEXT = ''
      event.preventDefault();
    }
  }
}
